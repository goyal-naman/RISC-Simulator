========================================================
Functional & Pipeline Simulator for simpleRISC processor
========================================================

README

Table of contents
1. Directory Structure
2. How to build
3. How to execute

Directory Structure:
--------------------
CSL211-Project
  |
  |- bin
      |
      |- sim
  |- include
      |
      |- Core.h
      |- Memory.h
      |- PipelineRegister.h
      |- Register.h
  |- src
      |- main.cpp
      |- Core.cpp
      |- Memory.cpp
      |- PipelineRegister.cpp
  |- test
      |- simple_add.mem
      |- fib.mem
      |- array_add.mem
      |- assign4.mem

How to build
------------
For building:
	$make

For cleaning the project:
	$make clean

How to execute
--------------

$./bin/sim <arguments>

Help
-h : Display Help

Mandatory Arguments
-input [Input MEM File name] : Specify Input File
-output [Input MEM File name] : Specify Input File

Optional Arguments
-pipe : Use pipeline based processor
-debug [0 | 1 | 2] : Specify debug level
-mem [Memory_OUT File name] : Specify Memory_OUT File Name
-context [Context_OUT File name] : Specify Context_OUT File Name


The code generates a MEMORY_OUT i.e. the complete memory at the termination of program 
and a CONTEXT_OUT i.e. complete context of processor at the termination of program.

The output contains instruction by instruction work done in each cycle in all stages namely -

1. FETCH
2. DEOCDE
3. EXECUTE
4. MEMORY ACCESS
5. WRITEBACK

Developed by
Naman Goyal (email: 2015csb1021@iitrpr.ac.in)

Supervised by
Dr. Neeraj Goel (email: neeraj@iitrpr.ac.in)

Notable Contributions by
Eeshaan Sharma
Ms. Varsha Bhat
Ms. Amanjot Kaur
